// expanding our palette to https://en.wikipedia.org/wiki/Block_Elements

// Any characters that could be created by inverting one of these was removed.
// That leaves 20 in total.

use crate::printer::block::masks::{SUBPIXEL64_COLUMNS, SUBPIXEL64_ROWS};

// U+2581	‚ñÅ	Lower one eighth block
const LOWER_ONE_EIGHTH_BLOCK: LabeledMasker<HorizontalMasker> = LabeledMasker('‚ñÅ', HorizontalMasker(2));
// U+2582	‚ñÇ	Lower one quarter block
const LOWER_ONE_QUARTER_BLOCK: LabeledMasker<HorizontalMasker> = LabeledMasker('‚ñÇ', HorizontalMasker(4));
// U+2583	‚ñÉ	Lower three eighths block
const LOWER_THREE_EIGHTHS_BLOCK: LabeledMasker<HorizontalMasker> = LabeledMasker('‚ñÉ', HorizontalMasker(6));
// U+2584	‚ñÑ	Lower half block
const LOWER_HALF_BLOCK: LabeledMasker<HorizontalMasker> = LabeledMasker('‚ñÑ', HorizontalMasker(8));
// U+2585	‚ñÖ	Lower five eighths block
const LOWER_FIVE_EIGHTHS_BLOCK: LabeledMasker<HorizontalMasker> = LabeledMasker('‚ñÖ', HorizontalMasker(10));
// U+2586	‚ñÜ	Lower three quarters block
const LOWER_THREE_QUARTERS_BLOCK: LabeledMasker<HorizontalMasker> = LabeledMasker('‚ñÜ', HorizontalMasker(12));
// U+2587	‚ñá	Lower seven eighths block
const LOWER_SEVEN_EIGHTHS_BLOCK: LabeledMasker<HorizontalMasker> = LabeledMasker('‚ñá', HorizontalMasker(14));
// U+2588	‚ñà	Full block
const FULL_BLOCK: LabeledMasker<FullMasker> = LabeledMasker('‚ñà', FullMasker);
// U+2589	‚ñâ	Left seven eighths block
const LEFT_SEVEN_EIGHTHS_BLOCK: LabeledMasker<VerticalMasker> = LabeledMasker('‚ñâ', VerticalMasker(7));
// U+258A	‚ñä	Left three quarters block
const LEFT_THREE_QUARTERS_BLOCK: LabeledMasker<VerticalMasker> = LabeledMasker('‚ñä', VerticalMasker(6));
// U+258B	‚ñã	Left five eighths block
const LEFT_FIVE_EIGHTHS_BLOCK: LabeledMasker<VerticalMasker> = LabeledMasker('‚ñã', VerticalMasker(5));
// U+258C	‚ñå	Left half block
const LEFT_HALF_BLOCK: LabeledMasker<VerticalMasker> = LabeledMasker('‚ñå', VerticalMasker(4));
// U+258D	‚ñç	Left three eighths block
const LEFT_THREE_EIGHTHS_BLOCK: LabeledMasker<VerticalMasker> = LabeledMasker('‚ñç', VerticalMasker(3));
// U+258E	‚ñé	Left one quarter block
const LEFT_ONE_QUARTER_BLOCK: LabeledMasker<VerticalMasker> = LabeledMasker('‚ñé', VerticalMasker(2));
// U+258F	‚ñè	Left one eighth block
const LEFT_ONE_EIGHTH_BLOCK: LabeledMasker<VerticalMasker> = LabeledMasker('‚ñè', VerticalMasker(1));
// U+2596	‚ññ	Quadrant lower left
const QUADRANT_LOWER_LEFT: LabeledMasker<AndMasker<VerticalMasker, HorizontalMasker>> = LabeledMasker('‚ññ', AndMasker(VerticalMasker(4), HorizontalMasker(8)));
// U+2597	‚ñó	Quadrant lower right
const QUADRANT_LOWER_RIGHT: LabeledMasker<AndMasker<InvertMasker<VerticalMasker>, HorizontalMasker>> = LabeledMasker('‚ñó', AndMasker(InvertMasker(VerticalMasker(4)), HorizontalMasker(8)));
// U+2598	‚ñò	Quadrant upper left
const QUADRANT_UPPER_LEFT: LabeledMasker<AndMasker<VerticalMasker, InvertMasker<HorizontalMasker>>> = LabeledMasker('‚ñò', AndMasker(VerticalMasker(4), InvertMasker(HorizontalMasker(8))));
// U+259A	‚ñö	Quadrant upper left and lower right
const QUADRANT_UPPER_LEFT_AND_LOWER_RIGHT: LabeledMasker<XorMasker<HorizontalMasker, VerticalMasker>> = LabeledMasker('‚ñö', XorMasker(HorizontalMasker(4), VerticalMasker(8)));
// U+259D	‚ñù	Quadrant upper right
const QUADRANT_UPPER_RIGHT: LabeledMasker<AndMasker<InvertMasker<VerticalMasker>, InvertMasker<HorizontalMasker>>> = LabeledMasker('‚ñù', AndMasker(InvertMasker(VerticalMasker(4)), InvertMasker(HorizontalMasker(8))));

// ‚ó¢‚ó£
const RAMP_UP: LabeledMasker<Linear> = LabeledMasker('‚ó¢', Linear(2., 0.));
const RAMP_DOWN: LabeledMasker<Linear> = LabeledMasker('‚ó£', Linear(1., -4.));

const RAMP_1: LabeledMasker<Linear> = LabeledMasker('ü≠á', Linear(1., -4.));
const RAMP_2: LabeledMasker<Linear> = LabeledMasker('ü≠à', Linear(0.6, 0.));
const RAMP_3: LabeledMasker<Linear> = LabeledMasker('ü≠â', Linear(2., -8.));
const RAMP_4: LabeledMasker<Linear> = LabeledMasker('ü≠ä', Linear(1., 0.));
const RAMP_5: LabeledMasker<Linear> = LabeledMasker('ü≠ã', Linear(4., -16.));
const RAMP_6: LabeledMasker<Linear> = LabeledMasker('ü≠Ü', Linear(1., 4.));

/*
'ü≠á' => RAMP_1.1.mask(row, column),
'ü≠à' => RAMP_2.1.mask(row, column),
'ü≠â' => RAMP_3.1.mask(row, column),
'ü≠ä' => RAMP_4.1.mask(row, column),
'ü≠ã' => RAMP_5.1.mask(row, column),
'ü≠Ü' => RAMP_6.1.mask(row, column),
// ü≠á ü≠à ü≠â ü≠ä ü≠ã ü≠Ü
'ü≠ë', RAMP_6.1.mask(row, SUBPIXEL64_COLUMNS - column),
'ü≠Ä', RAMP_5.1.mask(row, SUBPIXEL64_COLUMNS - column),
'ü¨ø', RAMP_4.1.mask(row, SUBPIXEL64_COLUMNS - column),
'ü¨æ', RAMP_3.1.mask(row, SUBPIXEL64_COLUMNS - column),
'ü¨Ω', RAMP_2.1.mask(row, SUBPIXEL64_COLUMNS - column),
'ü¨º', RAMP_1.1.mask(row, SUBPIXEL64_COLUMNS - column),
'ü≠¢', RAMP_1.1.mask(SUBPIXEL64_ROWS - row, column),
'ü≠£', RAMP_2.1.mask(SUBPIXEL64_ROWS - row, column),
'ü≠§', RAMP_3.1.mask(SUBPIXEL64_ROWS - row, column),
'ü≠•', RAMP_4.1.mask(SUBPIXEL64_ROWS - row, column),
'ü≠¶', RAMP_5.1.mask(SUBPIXEL64_ROWS - row, column),
'ü≠ß', RAMP_6.1.mask(SUBPIXEL64_ROWS - row, column),
'ü≠ú', RAMP_6.1.mask(SUBPIXEL64_ROWS - row, SUBPIXEL64_COLUMNS - column),
'ü≠õ', RAMP_5.1.mask(SUBPIXEL64_ROWS - row, SUBPIXEL64_COLUMNS - column),
'ü≠ö', RAMP_4.1.mask(SUBPIXEL64_ROWS - row, SUBPIXEL64_COLUMNS - column),
'ü≠ô', RAMP_3.1.mask(SUBPIXEL64_ROWS - row, SUBPIXEL64_COLUMNS - column),
'ü≠ò', RAMP_2.1.mask(SUBPIXEL64_ROWS - row, SUBPIXEL64_COLUMNS - column),
'ü≠ó', RAMP_1.1.mask(SUBPIXEL64_ROWS - row, SUBPIXEL64_COLUMNS - column),
 */

// Now, instead of considering a 1x2 block at a time, we actually need to consider
// a 8x16 block.
// If 1 pixel is an 8x8, then we have 64 subpixels.

// Consider that the pixels are arranged in a row-major format, starting with 0,0

pub const ALL_BLOCK_ELEMENTS: &str = "‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà‚ñâ‚ñä‚ñã‚ñå‚ñç‚ñé‚ñè‚ññ‚ñó‚ñò‚ñö‚ñù";

pub trait Masker {
    fn mask(&self, row: usize, column: usize) -> bool;
}

pub struct CharMasker(pub char);

struct LabeledMasker<M: ?Sized + Masker>(pub char, pub(crate) M);

struct FullMasker;

struct VerticalMasker(usize); // number of columns in the left
struct HorizontalMasker(usize); // number of rows on the bottom

struct InvertMasker<M: Masker>(M); // invert the masker
struct XorMasker<S: Masker, T: Masker>(S, T); // join 2 maskers together with NAND
struct AndMasker<S: Masker, T: Masker>(S, T); // join 2 maskers together with AND
struct OrMasker<S: Masker, T: Masker>(S, T); // join 2 maskers together, keeping all parts

struct Linear(f32, f32); // (m, b) => true if y >= mx + b

impl Masker for CharMasker {
    fn mask(&self, row: usize, column: usize) -> bool {
        match self.0 {
            '‚ñÅ' => LOWER_ONE_EIGHTH_BLOCK.1.mask(row, column),
            '‚ñÇ' => LOWER_ONE_QUARTER_BLOCK.1.mask(row, column),
            '‚ñÉ' => LOWER_THREE_EIGHTHS_BLOCK.1.mask(row, column),
            '‚ñÑ' => LOWER_HALF_BLOCK.1.mask(row, column),
            '‚ñÖ' => LOWER_FIVE_EIGHTHS_BLOCK.1.mask(row, column),
            '‚ñÜ' => LOWER_THREE_QUARTERS_BLOCK.1.mask(row, column),
            '‚ñá' => LOWER_SEVEN_EIGHTHS_BLOCK.1.mask(row, column),
            '‚ñà' => FULL_BLOCK.1.mask(row, column),
            '‚ñâ' => LEFT_SEVEN_EIGHTHS_BLOCK.1.mask(row, column),
            '‚ñä' => LEFT_THREE_QUARTERS_BLOCK.1.mask(row, column),
            '‚ñã' => LEFT_FIVE_EIGHTHS_BLOCK.1.mask(row, column),
            '‚ñå' => LEFT_HALF_BLOCK.1.mask(row, column),
            '‚ñç' => LEFT_THREE_EIGHTHS_BLOCK.1.mask(row, column),
            '‚ñé' => LEFT_ONE_QUARTER_BLOCK.1.mask(row, column),
            '‚ñè' => LEFT_ONE_EIGHTH_BLOCK.1.mask(row, column),
            '‚ññ' => QUADRANT_LOWER_LEFT.1.mask(row, column),
            '‚ñó' => QUADRANT_LOWER_RIGHT.1.mask(row, column),
            '‚ñò' => QUADRANT_UPPER_LEFT.1.mask(row, column),
            '‚ñö' => QUADRANT_UPPER_LEFT_AND_LOWER_RIGHT.1.mask(row, column),
            '‚ñù' => QUADRANT_UPPER_RIGHT.1.mask(row, column),
            'ü≠á' => RAMP_1.1.mask(row, column),
            'ü≠à' => RAMP_2.1.mask(row, column),
            'ü≠â' => RAMP_3.1.mask(row, column),
            'ü≠ä' => RAMP_4.1.mask(row, column),
            'ü≠ã' => RAMP_5.1.mask(row, column),
            'ü≠Ü' => RAMP_6.1.mask(row, column),
            '‚ó¢' => RAMP_UP.1.mask(row, column),
            '‚ó£' => RAMP_DOWN.1.mask(row, column),
            'ü≠ë' => RAMP_6.1.mask(row, SUBPIXEL64_COLUMNS as usize - column),
            'ü≠Ä' => RAMP_5.1.mask(row, SUBPIXEL64_COLUMNS as usize - column),
            'ü¨ø' => RAMP_4.1.mask(row, SUBPIXEL64_COLUMNS as usize - column),
            'ü¨æ' => RAMP_3.1.mask(row, SUBPIXEL64_COLUMNS as usize - column),
            'ü¨Ω' => RAMP_2.1.mask(row, SUBPIXEL64_COLUMNS as usize - column),
            'ü¨º' => RAMP_1.1.mask(row, SUBPIXEL64_COLUMNS as usize - column),
            'ü≠¢' => RAMP_1.1.mask(SUBPIXEL64_ROWS as usize - row, column),
            'ü≠£' => RAMP_2.1.mask(SUBPIXEL64_ROWS as usize - row, column),
            'ü≠§' => RAMP_3.1.mask(SUBPIXEL64_ROWS as usize - row, column),
            'ü≠•' => RAMP_4.1.mask(SUBPIXEL64_ROWS as usize - row, column),
            'ü≠¶' => RAMP_5.1.mask(SUBPIXEL64_ROWS as usize - row, column),
            'ü≠ß' => RAMP_6.1.mask(SUBPIXEL64_ROWS as usize - row, column),
            'ü≠ú' => RAMP_6.1.mask(SUBPIXEL64_ROWS as usize - row, SUBPIXEL64_COLUMNS as usize - column),
            'ü≠õ' => RAMP_5.1.mask(SUBPIXEL64_ROWS as usize - row, SUBPIXEL64_COLUMNS as usize - column),
            'ü≠ö' => RAMP_4.1.mask(SUBPIXEL64_ROWS as usize - row, SUBPIXEL64_COLUMNS as usize - column),
            'ü≠ô' => RAMP_3.1.mask(SUBPIXEL64_ROWS as usize - row, SUBPIXEL64_COLUMNS as usize - column),
            'ü≠ò' => RAMP_2.1.mask(SUBPIXEL64_ROWS as usize - row, SUBPIXEL64_COLUMNS as usize - column),
            'ü≠ó' => RAMP_1.1.mask(SUBPIXEL64_ROWS as usize - row, SUBPIXEL64_COLUMNS as usize - column),
            _ => panic!("Unknown character '{}'", self.0)
        }
    }
}

impl<S: Masker, T: Masker> Masker for XorMasker<S, T> {
    fn mask(&self, row: usize, column: usize) -> bool {
        self.0.mask(row, column) ^ self.1.mask(row, column)
    }
}
impl<S: Masker, T: Masker> Masker for AndMasker<S, T> {
    fn mask(&self, row: usize, column: usize) -> bool {
        self.0.mask(row, column) && self.1.mask(row, column)
    }
}

impl<S: Masker, T: Masker> Masker for OrMasker<S, T> {
    fn mask(&self, row: usize, column: usize) -> bool {
        self.0.mask(row, column) || self.1.mask(row, column)
    }
}

impl Masker for VerticalMasker {
    fn mask(&self, row: usize, column: usize) -> bool {
        column < self.0
    }
}

impl Masker for HorizontalMasker {
    fn mask(&self, row: usize, column: usize) -> bool {
        (SUBPIXEL64_ROWS as usize - row - 1) < self.0
    }
}

impl Masker for Linear {
    fn mask(&self, row: usize, column: usize) -> bool {
        ((SUBPIXEL64_ROWS as usize - row) as f32) <= (column as f32 * self.0 + self.1)
    }
}

impl<M: Masker> Masker for InvertMasker<M> {
    fn mask(&self, row: usize, column: usize) -> bool {
        !self.0.mask(row, column)
    }
}

impl Masker for FullMasker {
    fn mask(&self, _row: usize, _column: usize) -> bool {
        true
    }
}